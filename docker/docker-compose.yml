# # version: 'X'
# # services:
# #   app_A:
# #     # ...
# #     # parâmetros
# #     # ...
# #   app_B:
# #     # ...
# #     # parâmetros
# #     # ...
# #   # ...
# version: '3'
# services:
# # tests
# # O nome do service deverá ser todotests;
#   todotests:
#     build: ./todo-app/tests/
#     # Deve ter uma variável de ambiente FRONT_HOST que recebe como valor o nome do container do frontend
#     environment:
#       # - FRONT_HOST=frontend
#     # Lembrando que, dentro de uma rede docker, o host de um container é indentificado pelo seu nome.
#       - FRONT_HOST=todofront
#     # O container de todotests deve ter como dependencia os containers frontend e backend;
#     depends_on:
#       - todofront
#       - todoback
# # front-end
# # O nome do service deverá ser todofront;
#   todofront:
#     build: ./todo-app/front-end/
#     # Deve ter como dependencia o container backend;
#     depends_on:
#       - todoback
#     # Deve ter uma variável de ambiente REACT_APP_API_HOST que recebe como valor o nome do container do backend.
#     environment:
#       - REACT_APP_API_HOST=todoback
#     # O container de todofrontend deve rodar na porta 3000;
#     ports:
#       - 3000:3000
# # back-end
# # O nome do service deverá ser todoback;
#   todoback:
#     build: ./todo-app/back-end/
#     # O container de todobackend deve rodar na porta 3001;
#     ports:
#       - 3001:3001

version: '3'
services:

  todofront:
    depends_on:
      - todoback
    build: ./todo-app/front-end/
    ports:
      - 3000:3000

    environment:
      - REACT_APP_API_HOST=todoback
    restart: always
  
  todoback:
    build: ./todo-app/back-end/
    restart: always
    ports:
      - 3001:3001
      
  todotests:
    build: ./todo-app/tests/
    depends_on:
      - todoback
      - todofront
    environment:
      - FRONT_HOST=todofront